use std::path::Path;
use std::env;
use std::fs;

use hivmlib::{LIBRARY_ENV_VARIABLE, ADDRESS_SIZE, INSTRUCTION_SIZE, INTERRUPT_SIZE, ERROR_CODE_SIZE, ErrorCodes, Interrupts};


const ARCH_LIB_NAME: &'static str = "archlib.asm";


fn exit(message: &str) -> ! {
    eprintln!("{}", message);
    std::process::exit(1);
}


fn main() {

    let library_dir = env::var_os(LIBRARY_ENV_VARIABLE)
        .unwrap_or_else(|| exit(format!("Could not read environment variable {LIBRARY_ENV_VARIABLE}").as_str()));

    let library_dir = Path::new(&library_dir);
    let arch_lib_path = library_dir.join(ARCH_LIB_NAME);
    
    let asm = format!("

; This is an automatically generated library file. Do not edit this file manually.
; This file contains enrivonment variables for the VM architecture. 

.archlib

    ; Architecture details

    %= ADDRESS_SIZE {ADDRESS_SIZE}
    %= INSTRUCTION_SIZE {INSTRUCTION_SIZE}
    %= INTERRUPT_CODE_SIZE {INTERRUPT_SIZE}
    %= ERROR_CODE_SIZE {ERROR_CODE_SIZE}

    ; Built-in error codes

    %= UNEXPECTED_EOF_ERROR_CODE {UNEXPECTED_EOF_ERROR_CODE}
    %= GENERIC_ERROR_CODE {GENERIC_ERROR_CODE}
    %= NO_ERROR_CODE {NO_ERROR_CODE}
    %= EOF_ERROR_CODE {EOF_ERROR_CODE}

    ; Interrupt codes

    %= PRINT1_INTR {PRINT1_INTR}
    %= PRINT2_INTR {PRINT2_INTR}
    %= PRINT4_INTR {PRINT4_INTR}
    %= PRINT8_INTR {PRINT8_INTR}
    %= PRINT_BYTES_INTR {PRINT_BYTES_INTR}
    %= PRINT_CHAR_INTR {PRINT_CHAR_INTR}
    %= PRINT_STRING_INTR {PRINT_STRING_INTR}
    %= PRINT_STATIC_BYTES_INTR {PRINT_STATIC_BYTES_INTR}
    %= PRINT_STATIC_STRING_INTR {PRINT_STATIC_STRING_INTR}
    %= READ_BYTES_INTR {READ_BYTES_INTR}
    %= READ_ALL_INTR {READ_ALL_INTR}

    ",
        UNEXPECTED_EOF_ERROR_CODE = ErrorCodes::UnexpectedEOF as i32,
        GENERIC_ERROR_CODE = ErrorCodes::GenericError as i32,
        NO_ERROR_CODE = ErrorCodes::NoError as i32,
        EOF_ERROR_CODE = ErrorCodes::EOF as i32,
        PRINT1_INTR = Interrupts::Print1,
        PRINT2_INTR = Interrupts::Print2,
        PRINT4_INTR = Interrupts::Print4,
        PRINT8_INTR = Interrupts::Print8,
        PRINT_BYTES_INTR = Interrupts::PrintBytes,
        PRINT_CHAR_INTR = Interrupts::PrintChar,
        PRINT_STRING_INTR = Interrupts::PrintString,
        PRINT_STATIC_BYTES_INTR = Interrupts::PrintStaticBytes,
        PRINT_STATIC_STRING_INTR = Interrupts::PrintStaticString,
        READ_BYTES_INTR = Interrupts::ReadBytes,
        READ_ALL_INTR = Interrupts::ReadAll,
    );

    fs::write(&arch_lib_path, asm)
        .unwrap_or_else(|err| exit(format!("Could not write library file {}:\n{}", arch_lib_path.display(), err).as_str()));

    println!("Generated ASM library file {}", arch_lib_path.display());
}

